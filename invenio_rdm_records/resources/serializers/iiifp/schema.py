# -*- coding: utf-8 -*-
#
# Copyright (C) 2021 CERN.
# Copyright (C) 2021 data-futures.
# Copyright (C) 2022 Esteban J. G. Gabancho
#
# Invenio-RDM-Records is free software; you can redistribute it and/or modify
# it under the terms of the MIT License; see LICENSE file for more details.

"""IIIF Presentation API Schema for Invenio RDM Records."""

from flask import current_app
from marshmallow import Schema, fields, missing


class IIIFPresiSchemaV2(Schema):
    """IIIF Presentation API Marshmallow Schema."""

    class Meta:
        """Marshmallow meta class."""

        include = {
            '@context': fields.Constant(
                'http://iiif.io/api/presentation/2/context.json'
            ),
            '@type': fields.Constant("sc:Manifest"),
            '@id': fields.String(attribute='links.self_iiif_manifest'),
        }

    label = fields.String(attribute='metadata.title')

    metadata = fields.Method('get_metadata')

    description = fields.String(
        attribute="metadata.description",
        default="Manifest generated by InvenioRDM",
    )

    license = fields.Method("get_license")

    sequences = fields.Method('get_sequence')

    def get_license(self, obj):
        """Create the license."""
        # FIXME: only supports one license
        try:
            return obj["metadata"]["rights"][0]["link"]
        except (AttributeError, KeyError):
            return missing

    def get_metadata(self, obj):
        """Generate metadata entries."""
        # FIXME: This is a free field, no semantics conveyed by this
        # Can we add the entire record serialized as DB?
        return [
            {
                'label': 'Publication Date',
                'value': obj['metadata']['publication_date'],
            }
        ]

    def get_sequence(self, obj):
        """Create sequence of canvases from any image attachments."""
        canvases = []
        for i, file_ in enumerate(obj.files.entries):
            canvases.append(
                {
                    "@id": f"{obj.links['self']}/canvas/p{i+1}",  # FIXME {scheme}://{host}/{prefix}/{identifier}/canvas/{name}
                    "@type": "sc:Canvas",
                    "label": file_['key'],
                    # "width": width, TODO
                    # "height": height,TODO
                    "images": [
                        {
                            "@type": "oa:Annotation",
                            "motivation": "sc:painting",  # FIXME
                            "@id": f"{obj.links['self']}/canvas/p{i+1}/a1",
                            "on": f"{obj.links['self']}/canvas/p{i+1}",
                            "resource": {
                                "@id": file_['links'][
                                    'self'
                                ],  # FIXME: iiif uri
                                "@type": "dctypes:Image",
                                "format": file_['mimetype'],
                                # "width": width,
                                # "height": height,
                                "service": {
                                    "@id": file_['links'][
                                        'self'
                                    ],  # FIXME IIIF info.json uri
                                    "@context": "https://iiif.io/api/image/2/context.json",
                                    "profile": "http://iiif.io/api/image/2/level2.json",
                                },
                            },
                        }
                    ],
                }
            )

        return [
            {
                '@id': f"{obj.links['self']}/iiif/sequence/default",  # FIXME: {scheme}://{host}/{prefix}/{identifier}/sequence/{name}
                '@type': 'sc:Sequence',
                'label': 'default order',
                'viewingDirection': 'left-to-right',  # FIXME
                'viewingHint': 'paged',
                'canvases': canvases,
            }
        ]
